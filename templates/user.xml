<templateSet group="user">
  <template name="pt.dao" value="class Student {&#10;    private java.lang.String name;&#10;    private int rollNo;&#10;&#10;    Student(java.lang.String name, int rollNo){&#10;        this.name = name;&#10;        this.rollNo = rollNo;&#10;    }&#10;&#10;    public java.lang.String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(java.lang.String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public int getRollNo() {&#10;        return rollNo;&#10;    }&#10;&#10;    public void setRollNo(int rollNo) {&#10;        this.rollNo = rollNo;&#10;    }&#10;}&#10;&#10;interface StudentDao {&#10;    public java.util.List&lt;Student&gt; getAllStudents();&#10;    public Student getStudent(int rollNo);&#10;    public void updateStudent(Student student);&#10;    public void deleteStudent(Student student);&#10;}&#10;&#10;class StudentDaoImpl implements StudentDao {&#10;&#10;    //list is working as a database&#10;    java.util.List&lt;Student&gt; students;&#10;&#10;    public StudentDaoImpl(){&#10;        students = new java.util.ArrayList&lt;Student&gt;();&#10;        Student student1 = new Student(&quot;Robert&quot;,0);&#10;        Student student2 = new Student(&quot;John&quot;,1);&#10;        students.add(student1);&#10;        students.add(student2);&#10;    }&#10;    @java.lang.Override&#10;    public void deleteStudent(Student student) {&#10;        students.remove(student.getRollNo());&#10;        java.lang.System.out.println(&quot;Student: Roll No &quot; + student.getRollNo() + &quot;, deleted from database&quot;);&#10;    }&#10;&#10;    //retrive list of students from the database&#10;    @java.lang.Override&#10;    public java.util.List&lt;Student&gt; getAllStudents() {&#10;        return students;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public Student getStudent(int rollNo) {&#10;        return students.get(rollNo);&#10;    }&#10;&#10;    @java.lang.Override&#10;    public void updateStudent(Student student) {&#10;        students.get(student.getRollNo()).setName(student.getName());&#10;        java.lang.System.out.println(&quot;Student: Roll No &quot; + student.getRollNo() + &quot;, updated in the database&quot;);&#10;    }&#10;}&#10;&#10;class DaoPatternDemo {&#10;    public static void main(java.lang.String[] args) {&#10;        StudentDao studentDao = new StudentDaoImpl();&#10;&#10;        //print all students&#10;        for (Student student : studentDao.getAllStudents()) {&#10;            java.lang.System.out.println(&quot;Student: [RollNo : &quot; + student.getRollNo() + &quot;, Name : &quot; + student.getName() + &quot; ]&quot;);&#10;        }&#10;&#10;&#10;        //update student&#10;        Student student =studentDao.getAllStudents().get(0);&#10;        student.setName(&quot;Michael&quot;);&#10;        studentDao.updateStudent(student);&#10;&#10;        //get the student&#10;        studentDao.getStudent(0);&#10;        java.lang.System.out.println(&quot;Student: [RollNo : &quot; + student.getRollNo() + &quot;, Name : &quot; + student.getName() + &quot; ]&quot;);&#10;    }&#10;}" description="Simple DAO pattern" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="dkc.java.postgres.mongo.maven" value="version: '3'&#10;services:&#10;&#10;  ade-postgres:&#10;    image: &quot;postgres&quot;&#10;    container_name: &quot;my_postgres&quot;&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    restart: always&#10;&#10;  ade-mongo:&#10;    container_name: mongo&#10;    image: mongo&#10;    ports:&#10;      - &quot;27017:27017&quot;&#10;    restart: always&#10;&#10;&#10;  app:&#10;    build: .&#10;    volumes:&#10;      - .:/app&#10;      - ~/.m2:/root/.m2&#10;    working_dir: /app&#10;    ports:&#10;      - 8080:8080&#10;    command: mvn clean spring-boot:run&#10;    depends_on:&#10;      - ade-postgres&#10;      - ade-mongo" description="Simple docker compose file for java, postgres, mongo and maven" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="dk.maven" value="FROM maven:3.6.1-jdk-12" description="Simple dockerfile for maven" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="dk.gradle" value="FROM gradle:5.5.1-jdk12" description="Simple dockerfile for gradle" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="sb.setup.postgres" value="## default connection pool&#10;spring.datasource.hikari.connectionTimeout=20000&#10;spring.datasource.hikari.maximumPoolSize=5&#10;spring.datasource.url=jdbc:postgresql://ade-postgres:5432/postgres&#10;spring.datasource.username=postgres&#10;spring.datasource.password=&#10;spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true&#10;spring.jpa.hibernate.ddl-auto=create" description="Spring Boot Postgres setup" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="sb.setup.mongo" value="spring.data.mongodb.host=ade-mongo&#10;spring.data.mongodb.port=27017&#10;spring.data.mongodb.database=demo&#10;#spring.data.mongodb.uri=mongodb://eyeco:eyeco2019@ds249137.mlab.com:49137/eyeco" description="Spring Boot Mongo setup" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="dkc.java.postgres.gradle" value="version: '3'&#10;services:&#10;&#10;  ade-postgres:&#10;    image: &quot;postgres&quot;&#10;    container_name: &quot;my_postgres&quot;&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    restart: always&#10;&#10;  app:&#10;    build: .&#10;    volumes:&#10;      - .:/app&#10;      - ~/.m2:/root/.m2&#10;    working_dir: /app&#10;    ports:&#10;      - 8080:8080&#10;    command: ./gradlew clean bootRun&#10;    depends_on:&#10;      - ade-postgres" description="Simple docker compose file for java, postgres and gradle" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="gdl.swagger" value="compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'&#10;compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'" description="Gradle Swager dependencies" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="sb.setup.pagination" value="spring.data.web.pageable.one-indexed-parameters=true" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="sb.starter.api" value="import lombok.Data;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.hibernate.annotations.CreationTimestamp;&#10;import org.hibernate.annotations.UpdateTimestamp;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.persistence.Entity;&#10;import javax.persistence.GeneratedValue;&#10;import javax.persistence.GenerationType;&#10;import javax.persistence.Id;&#10;import javax.validation.Valid;&#10;import javax.validation.constraints.NotNull;&#10;import java.math.BigDecimal;&#10;import java.util.Date;&#10;import java.util.Optional;&#10;&#10;// model&#10;@lombok.Data&#10;@javax.persistence.Entity&#10;class Product {&#10;&#9;@javax.persistence.Id&#10;&#9;@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)&#10;&#9;private java.lang.Long id;&#10;&#10;&#9;@javax.validation.constraints.NotNull(message = &quot;it can be null&quot;)&#10;&#9;private java.lang.String name;&#10;&#10;&#9;private java.lang.String description;&#10;&#10;&#9;private java.math.BigDecimal price;&#10;&#10;&#9;@org.hibernate.annotations.CreationTimestamp&#10;&#9;private java.util.Date createdAt;&#10;&#10;&#9;@org.hibernate.annotations.UpdateTimestamp&#10;&#9;private java.util.Date updatedAt;&#10;}&#10;&#10;// dto&#10;&#10;&#10;// interface&#10;interface ProductService {&#10;&#9;public com.adechinan.dev.demoapi.Product save(com.adechinan.dev.demoapi.Product product);&#10;&#9;public org.springframework.data.domain.Page&lt;com.adechinan.dev.demoapi.Product&gt; findAll(org.springframework.data.domain.Pageable pageable);&#10;&#9;public java.util.Optional&lt;com.adechinan.dev.demoapi.Product&gt; findById(java.lang.Long id);&#10;&#9;public void deleteById(java.lang.Long id);&#10;}&#10;&#10;// repository&#10;@org.springframework.stereotype.Repository&#10;interface ProductRepository extends org.springframework.data.jpa.repository.JpaRepository&lt;com.adechinan.dev.demoapi.Product, java.lang.Long&gt;{}&#10;&#10;&#10;// implementation&#10;@lombok.RequiredArgsConstructor&#10;@org.springframework.stereotype.Service&#10;class ProductServiceImpl implements com.adechinan.dev.demoapi.ProductService {&#10;&#10;&#9;private final com.adechinan.dev.demoapi.ProductRepository productRespository;&#10;&#10;&#9;public org.springframework.data.domain.Page&lt;com.adechinan.dev.demoapi.Product&gt; findAll(org.springframework.data.domain.Pageable pageable) {&#10;&#9;&#9;return productRespository.findAll(pageable);&#10;&#9;}&#10;&#10;&#9;public java.util.Optional&lt;com.adechinan.dev.demoapi.Product&gt; findById(java.lang.Long id) {&#10;&#9;&#9;return productRespository.findById(id);&#10;&#9;}&#10;&#10;&#9;public com.adechinan.dev.demoapi.Product save(com.adechinan.dev.demoapi.Product product) {&#10;&#9;&#9;return productRespository.save(product);&#10;&#9;}&#10;&#10;&#9;public void deleteById(java.lang.Long id) {&#10;&#9;&#9;productRespository.deleteById(id);&#10;&#9;}&#10;}&#10;&#10;// endpoints&#10;@lombok.extern.slf4j.Slf4j&#10;@lombok.RequiredArgsConstructor&#10;@org.springframework.web.bind.annotation.RestController&#10;@org.springframework.web.bind.annotation.RequestMapping(&quot;/api/v1/products&quot;)&#10;@org.springframework.web.bind.annotation.CrossOrigin&#10;class ProductAPI {&#10;&#9;private final com.adechinan.dev.demoapi.ProductService productService;&#10;&#10;&#9;@org.springframework.web.bind.annotation.GetMapping&#10;&#9;public org.springframework.data.domain.Page&lt;com.adechinan.dev.demoapi.Product&gt; findAll(org.springframework.data.domain.Pageable pageable) {&#10;&#9;&#9;return productService.findAll(pageable);&#10;&#9;}&#10;&#10;&#9;@org.springframework.web.bind.annotation.PostMapping&#10;&#9;public com.adechinan.dev.demoapi.Product create(@org.springframework.web.bind.annotation.RequestBody @javax.validation.Valid com.adechinan.dev.demoapi.Product product) {&#10;&#9;&#9;return productService.save(product);&#10;&#9;}&#10;&#10;&#9;@org.springframework.web.bind.annotation.GetMapping(&quot;/{id}&quot;)&#10;&#9;public com.adechinan.dev.demoapi.Product findById(@org.springframework.web.bind.annotation.PathVariable java.lang.Long id) {&#10;&#9;&#9;return productService.findById(id).orElseThrow(()-&gt; new java.lang.RuntimeException(&quot;resource not found&quot;));&#10;&#9;}&#10;&#10;&#9;@org.springframework.web.bind.annotation.PutMapping(&quot;/{id}&quot;)&#10;&#9;public com.adechinan.dev.demoapi.Product update(@org.springframework.web.bind.annotation.PathVariable java.lang.Long id, @org.springframework.web.bind.annotation.RequestBody com.adechinan.dev.demoapi.Product product) {&#10;&#9;&#9;product.setId(id);&#10;&#9;&#9;return productService.save(product);&#10;&#9;}&#10;&#10;&#9;@org.springframework.web.bind.annotation.DeleteMapping(&quot;/{id}&quot;)&#10;&#9;public void delete(@org.springframework.web.bind.annotation.PathVariable java.lang.Long id) {&#10;&#9;&#9;productService.deleteById(id);&#10;&#9;}&#10;&#10;&#10;}&#10;&#10;&#10;// app&#10;@org.springframework.boot.autoconfigure.SpringBootApplication&#10;//@EnableSwagger2&#10;public class DemoApiApplication {&#10;&#10;&#9;//http://localhost:8080/swagger-ui.html&#10;&#9;/*@Bean&#10;&#9;public Docket swagger() {&#10;&#9;&#9;return new Docket(DocumentationType.SWAGGER_2)&#10;&#9;&#9;&#9;&#9;.select()&#10;&#9;&#9;&#9;&#9;.apis(RequestHandlerSelectors.any())&#10;&#9;&#9;&#9;&#9;.paths(PathSelectors.any())&#10;&#9;&#9;&#9;&#9;.build();&#10;&#9;}*/&#10;&#10;&#9;public static void main(java.lang.String[] args) {&#10;&#9;&#9;org.springframework.boot.SpringApplication.run(com.adechinan.dev.demoapi.DemoApiApplication.class, args);&#10;&#9;}&#10;&#10;}" description="Simple Spring Boot API" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="sb.starter.exception" value="@lombok.Getter&#10;@lombok.Setter&#10;class ApiError {&#10;&#10;&#9;private org.springframework.http.HttpStatus status;&#10;&#9;private java.lang.String message;&#10;&#9;private java.util.List&lt;java.lang.String&gt; errors;&#10;&#10;&#9;public ApiError(org.springframework.http.HttpStatus status, java.lang.String message, java.util.List&lt;java.lang.String&gt; errors) {&#10;&#9;&#9;super();&#10;&#9;&#9;this.status = status;&#10;&#9;&#9;this.message = message;&#10;&#9;&#9;this.errors = errors;&#10;&#9;}&#10;&#10;&#9;public ApiError(org.springframework.http.HttpStatus status, java.lang.String message, java.lang.String error) {&#10;&#9;&#9;super();&#10;&#9;&#9;this.status = status;&#10;&#9;&#9;this.message = message;&#10;&#9;&#9;errors = java.util.Arrays.asList(error);&#10;&#9;}&#10;&#10;}&#10;&#10;&#10;@org.springframework.web.bind.annotation.ControllerAdvice&#10;class MyExceptionHandler extends org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler {&#10;&#10;   /* @ExceptionHandler({ Exception.class })&#10;    public ResponseEntity&lt;Object&gt; handleAll(Exception ex, WebRequest request) {&#10;        ApiError apiError = new ApiError(&#10;                HttpStatus.INTERNAL_SERVER_ERROR, ex.getLocalizedMessage(), &quot;error occurred&quot;);&#10;        return new ResponseEntity&lt;&gt;(&#10;                apiError, new HttpHeaders(), apiError.getStatus());&#10;    }*/&#10;&#10;   /* @ExceptionHandler({ ConstraintViolationException.class })&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolation(&#10;            ConstraintViolationException ex, WebRequest request) {&#10;        List&lt;String&gt; errors = new ArrayList&lt;String&gt;();&#10;        for (ConstraintViolation&lt;?&gt; violation : ex.getConstraintViolations()) {&#10;            errors.add(violation.getRootBeanClass().getName() + &quot; &quot; +&#10;                    violation.getPropertyPath() + &quot;: &quot; + violation.getMessage());&#10;        }&#10;&#10;        ApiError apiError =&#10;                new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);&#10;        return new ResponseEntity&lt;&gt;(&#10;                apiError, new HttpHeaders(), apiError.getStatus());&#10;    }*/&#10;&#10;&#10;&#9;@java.lang.Override&#10;&#9;protected org.springframework.http.ResponseEntity&lt;java.lang.Object&gt; handleMethodArgumentNotValid(&#10;&#9;&#9;&#9;org.springframework.web.bind.MethodArgumentNotValidException ex,&#10;&#9;&#9;&#9;org.springframework.http.HttpHeaders headers,&#10;&#9;&#9;&#9;org.springframework.http.HttpStatus status,&#10;&#9;&#9;&#9;org.springframework.web.context.request.WebRequest request) {&#10;&#9;&#9;java.util.List&lt;java.lang.String&gt; errors = new java.util.ArrayList&lt;java.lang.String&gt;();&#10;&#9;&#9;for (org.springframework.validation.FieldError error : ex.getBindingResult().getFieldErrors()) {&#10;&#9;&#9;&#9;errors.add(error.getField() + &quot;: &quot; + error.getDefaultMessage());&#10;&#9;&#9;}&#10;&#9;&#9;for (org.springframework.validation.ObjectError error : ex.getBindingResult().getGlobalErrors()) {&#10;&#9;&#9;&#9;errors.add(error.getObjectName() + &quot;: &quot; + error.getDefaultMessage());&#10;&#9;&#9;}&#10;&#10;&#9;&#9;com.adechinan.dev.demoapi.ApiError apiError =&#10;&#9;&#9;&#9;&#9;new com.adechinan.dev.demoapi.ApiError(org.springframework.http.HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);&#10;&#9;&#9;return handleExceptionInternal(&#10;&#9;&#9;&#9;&#9;ex, apiError, headers, apiError.getStatus(), request);&#10;&#9;}&#10;&#10;&#10;   /* @ExceptionHandler(MethodArgumentNotValidException.class)&#10;    public Map&lt;String, String&gt; handleValidationExceptions(&#10;            MethodArgumentNotValidException ex) {&#10;        Map&lt;String, String&gt; errors = new HashMap&lt;&gt;();&#10;        ex.getBindingResult().getAllErrors().forEach((error) -&gt; {&#10;            String fieldName = ((FieldError) error).getField();&#10;            String errorMessage = error.getDefaultMessage();&#10;            errors.put(fieldName, errorMessage);&#10;        });&#10;        return errors;&#10;    }*/&#10;&#10;   /*&#10;&#10;   {&#10;  &quot;name&quot;:&quot;Name is mandatory&quot;,&#10;  &quot;email&quot;:&quot;Email is mandatory&quot;&#10;}&#10;&#10;    */&#10;   &#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="gdl.jwt" value="compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'" description="Jwt dependencie" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="sb.setup.jwt" value="app.jwtSecret= JWTSuperSecretKey&#10;app.jwtExpirationInMs = 604800000" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="sb.starter.jwt" value="import com.fasterxml.jackson.annotation.JsonIgnore;&#10;import io.jsonwebtoken.Claims;&#10;import io.jsonwebtoken.Jwts;&#10;import io.jsonwebtoken.SignatureAlgorithm;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.hibernate.annotations.NaturalId;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.boot.CommandLineRunner;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.security.access.prepost.PreAuthorize;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.config.BeanIds;&#10;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;&#10;import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&#10;import org.springframework.security.config.http.SessionCreationPolicy;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.GrantedAuthority;&#10;import org.springframework.security.core.annotation.AuthenticationPrincipal;&#10;import org.springframework.security.core.authority.SimpleGrantedAuthority;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.core.userdetails.UserDetails;&#10;import org.springframework.security.core.userdetails.UserDetailsService;&#10;import org.springframework.security.core.userdetails.UsernameNotFoundException;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;&#10;import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.stereotype.Repository;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.filter.OncePerRequestFilter;&#10;&#10;import javax.persistence.*;&#10;import javax.servlet.FilterChain;&#10;import javax.servlet.ServletException;&#10;import javax.servlet.http.HttpServletRequest;&#10;import javax.servlet.http.HttpServletResponse;&#10;import javax.validation.Valid;&#10;import javax.validation.constraints.Email;&#10;import java.io.IOException;&#10;import java.util.*;&#10;&#10;import static java.util.stream.Collectors.toList;&#10;&#10;enum RoleName {&#10;    ROLE_USER,&#10;    ROLE_ADMIN&#10;}&#10;&#10;@javax.persistence.Entity&#10;@javax.persistence.Table(name = &quot;roles&quot;)&#10;@lombok.Data&#10;@lombok.NoArgsConstructor&#10;class Role {&#10;&#9;@javax.persistence.Id&#10;&#9;@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)&#10;&#9;private java.lang.Long id;&#10;&#10;&#9;@javax.persistence.Enumerated(javax.persistence.EnumType.STRING)&#10;&#9;@org.hibernate.annotations.NaturalId&#10;&#9;@javax.persistence.Column(length = 60)&#10;&#9;private com.adechinan.dev.demojwt.RoleName name;&#10;&#10;&#9;public Role(com.adechinan.dev.demojwt.RoleName name) {&#10;&#9;&#9;this.name = name;&#10;&#9;}&#10;&#10;&#10;}&#10;&#10;@lombok.Data&#10;@javax.persistence.Entity&#10;class User {&#10;&#9;@javax.persistence.Id&#10;&#9;@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.IDENTITY)&#10;&#9;private java.lang.Long id;&#10;&#10;&#9;private java.lang.String name;&#10;&#9;&#10;&#9;@javax.persistence.Column(unique = true)&#10;&#9;private java.lang.String username;&#10;&#9;&#10;&#9;@javax.validation.constraints.Email&#10;&#9;@javax.persistence.Column(unique = true)&#10;&#9;private java.lang.String email;&#10;&#9;&#10;&#9;private java.lang.String password;&#10;&#9;&#10;&#9;@javax.persistence.ManyToMany(fetch = javax.persistence.FetchType.LAZY)&#10;&#9;@javax.persistence.JoinTable(name = &quot;user_roles&quot;,&#10;&#9;&#9;&#9;joinColumns = @javax.persistence.JoinColumn(name = &quot;user_id&quot;),&#10;&#9;&#9;&#9;inverseJoinColumns = @javax.persistence.JoinColumn(name = &quot;role_id&quot;))&#10;&#9;private java.util.Set&lt;com.adechinan.dev.demojwt.Role&gt; roles = new java.util.HashSet&lt;&gt;();&#10;&#10;&#10;&#9;public User(java.lang.String name, java.lang.String username, java.lang.String email, java.lang.String password) {&#10;&#9;&#9;this.name = name;&#10;&#9;&#9;this.username = username;&#10;&#9;&#9;this.email = email;&#10;&#9;&#9;this.password = password;&#10;&#9;}&#10;&#10;&#10;}&#10;&#10;class UserPrincipal implements org.springframework.security.core.userdetails.UserDetails {&#10;&#9;private java.lang.Long id;&#10;&#10;&#9;private java.lang.String name;&#10;&#10;&#9;private java.lang.String username;&#10;&#10;&#9;@com.fasterxml.jackson.annotation.JsonIgnore&#10;&#9;private java.lang.String email;&#10;&#10;&#9;@com.fasterxml.jackson.annotation.JsonIgnore&#10;&#9;private java.lang.String password;&#10;&#10;&#9;private java.util.Collection&lt;? extends org.springframework.security.core.GrantedAuthority&gt; authorities;&#10;&#10;&#9;public UserPrincipal(java.lang.Long id, java.lang.String name, java.lang.String username, java.lang.String email, java.lang.String password, java.util.Collection&lt;? extends org.springframework.security.core.GrantedAuthority&gt; authorities) {&#10;&#9;&#9;this.id = id;&#10;&#9;&#9;this.name = name;&#10;&#9;&#9;this.username = username;&#10;&#9;&#9;this.email = email;&#10;&#9;&#9;this.password = password;&#10;&#9;&#9;this.authorities = authorities;&#10;&#9;}&#10;&#10;&#9;public static com.adechinan.dev.demojwt.UserPrincipal create(com.adechinan.dev.demojwt.User user) {&#10;&#9;&#9;java.util.List&lt;org.springframework.security.core.GrantedAuthority&gt; authorities = user.getRoles().stream().map(role -&gt;&#10;&#9;&#9;&#9;&#9;new org.springframework.security.core.authority.SimpleGrantedAuthority(role.getName().name())&#10;&#9;&#9;).collect(toList());&#10;&#10;&#9;&#9;return new com.adechinan.dev.demojwt.UserPrincipal(&#10;&#9;&#9;&#9;&#9;user.getId(),&#10;&#9;&#9;&#9;&#9;user.getName(),&#10;&#9;&#9;&#9;&#9;user.getUsername(),&#10;&#9;&#9;&#9;&#9;user.getEmail(),&#10;&#9;&#9;&#9;&#9;user.getPassword(),&#10;&#9;&#9;&#9;&#9;authorities&#10;&#9;&#9;);&#10;&#9;}&#10;&#10;&#9;public java.lang.Long getId() {&#10;&#9;&#9;return id;&#10;&#9;}&#10;&#10;&#9;public java.lang.String getName() {&#10;&#9;&#9;return name;&#10;&#9;}&#10;&#10;&#9;public java.lang.String getEmail() {&#10;&#9;&#9;return email;&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public java.lang.String getUsername() {&#10;&#9;&#9;return username;&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public java.lang.String getPassword() {&#10;&#9;&#9;return password;&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public java.util.Collection&lt;? extends org.springframework.security.core.GrantedAuthority&gt; getAuthorities() {&#10;&#9;&#9;return authorities;&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public boolean isAccountNonExpired() {&#10;&#9;&#9;return true;&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public boolean isAccountNonLocked() {&#10;&#9;&#9;return true;&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public boolean isCredentialsNonExpired() {&#10;&#9;&#9;return true;&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public boolean isEnabled() {&#10;&#9;&#9;return true;&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public boolean equals(java.lang.Object o) {&#10;&#9;&#9;if (this == o) return true;&#10;&#9;&#9;if (o == null || getClass() != o.getClass()) return false;&#10;&#9;&#9;com.adechinan.dev.demojwt.UserPrincipal that = (com.adechinan.dev.demojwt.UserPrincipal) o;&#10;&#9;&#9;return java.util.Objects.equals(id, that.id);&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public int hashCode() {&#10;&#10;&#9;&#9;return java.util.Objects.hash(id);&#10;&#9;}&#10;}&#10;&#10;@org.springframework.stereotype.Repository&#10;interface RoleRepository extends org.springframework.data.jpa.repository.JpaRepository&lt;com.adechinan.dev.demojwt.Role, java.lang.Long&gt; {&#10;&#9;java.util.Optional&lt;com.adechinan.dev.demojwt.Role&gt; findByName(com.adechinan.dev.demojwt.RoleName roleName);&#10;}&#10;&#10;@org.springframework.stereotype.Repository&#10;interface UserRepository extends org.springframework.data.jpa.repository.JpaRepository&lt;com.adechinan.dev.demojwt.User, java.lang.Long&gt; {&#10;&#9;java.util.Optional&lt;com.adechinan.dev.demojwt.User&gt; findByUsernameOrEmail(java.lang.String username, java.lang.String email);&#10;}&#10;&#10;&#10;@org.springframework.stereotype.Service&#10;@lombok.RequiredArgsConstructor&#10;class CustomUserDetailsService implements org.springframework.security.core.userdetails.UserDetailsService {&#10;&#10;&#9;private final  com.adechinan.dev.demojwt.UserRepository userRepository;&#10;&#10;&#9;@java.lang.Override&#10;&#9;@org.springframework.transaction.annotation.Transactional&#10;&#9;public org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String usernameOrEmail)&#10;&#9;&#9;&#9;throws org.springframework.security.core.userdetails.UsernameNotFoundException {&#10;&#9;&#9;// Let people login with either username or email&#10;&#9;&#9;com.adechinan.dev.demojwt.User user = userRepository.findByUsernameOrEmail(usernameOrEmail, usernameOrEmail)&#10;&#9;&#9;&#9;&#9;.orElseThrow(() -&gt;&#10;&#9;&#9;&#9;&#9;&#9;&#9;new java.lang.RuntimeException(&quot;User not found with username or email : &quot; + usernameOrEmail)&#10;&#9;&#9;&#9;&#9;);&#10;&#10;&#9;&#9;return com.adechinan.dev.demojwt.UserPrincipal.create(user);&#10;&#10;&#9;}&#10;&#10;&#9;// This method is used by JWTAuthenticationFilter&#10;&#9;@org.springframework.transaction.annotation.Transactional&#10;&#9;public org.springframework.security.core.userdetails.UserDetails loadUserById(java.lang.Long id) {&#10;&#9;&#9;com.adechinan.dev.demojwt.User user = userRepository.findById(id).orElseThrow(&#10;&#9;&#9;&#9;&#9;() -&gt; new java.lang.RuntimeException(&quot;User not found with id : &quot; + id)&#10;&#9;&#9;);&#10;&#10;&#9;&#9;return com.adechinan.dev.demojwt.UserPrincipal.create(user);&#10;&#10;&#10;&#9;}&#10;}&#10;&#10;&#10;&#10;@org.springframework.stereotype.Component&#10;@lombok.extern.slf4j.Slf4j&#10;class JwtTokenProvider {&#10;&#10;&#9;@org.springframework.beans.factory.annotation.Value(&quot;${app.jwtSecret}&quot;)&#10;&#9;private java.lang.String jwtSecret = &quot;JWTSUperSecretKey&quot;;&#10;&#10;&#9;@org.springframework.beans.factory.annotation.Value(&quot;${app.jwtExpirationInMs}&quot;)&#10;&#9;private int jwtExpirationInMs;&#10;&#10;&#9;public java.lang.String generateToken(org.springframework.security.core.Authentication authentication) {&#10;&#10;&#9;&#9;com.adechinan.dev.demojwt.UserPrincipal userPrincipal = (com.adechinan.dev.demojwt.UserPrincipal) authentication.getPrincipal();&#10;&#9;&#9;java.util.Date now = new java.util.Date();&#10;&#9;&#9;java.util.Date expiryDate = new java.util.Date(now.getTime() + jwtExpirationInMs);&#10;&#10;&#9;&#9;return io.jsonwebtoken.Jwts.builder()&#10;&#9;&#9;&#9;&#9;.setSubject(java.lang.Long.toString(userPrincipal.getId()))&#10;&#9;&#9;&#9;&#9;.setIssuedAt(new java.util.Date())&#10;&#9;&#9;&#9;&#9;.setExpiration(expiryDate)&#10;&#9;&#9;&#9;&#9;.signWith(io.jsonwebtoken.SignatureAlgorithm.HS512, jwtSecret)&#10;&#9;&#9;&#9;&#9;.compact();&#10;&#9;}&#10;&#10;&#9;public java.lang.Long getUserIdFromJWT(java.lang.String token) {&#10;&#9;&#9;io.jsonwebtoken.Claims claims = io.jsonwebtoken.Jwts.parser()&#10;&#9;&#9;&#9;&#9;.setSigningKey(jwtSecret)&#10;&#9;&#9;&#9;&#9;.parseClaimsJws(token)&#10;&#9;&#9;&#9;&#9;.getBody();&#10;&#10;&#9;&#9;return java.lang.Long.parseLong(claims.getSubject());&#10;&#9;}&#10;&#10;&#9;public boolean validateToken(java.lang.String authToken) {&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;io.jsonwebtoken.Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(authToken);&#10;&#9;&#9;&#9;return true;&#10;&#9;&#9;} catch (java.lang.Exception ex) {&#10;&#9;&#9;&#9;log.error(ex.getMessage());&#10;&#9;&#9;}&#10;&#9;&#9;return false;&#10;&#9;}&#10;}&#10;&#10;&#10;@lombok.extern.slf4j.Slf4j&#10;class JwtAuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter {&#10;&#10;&#9;@org.springframework.beans.factory.annotation.Autowired&#10;&#9;private com.adechinan.dev.demojwt.JwtTokenProvider tokenProvider;&#10;&#10;&#9;@org.springframework.beans.factory.annotation.Autowired&#10;&#9;private com.adechinan.dev.demojwt.CustomUserDetailsService customUserDetailsService;&#10;&#10;&#9;@java.lang.Override&#10;&#9;protected void doFilterInternal(javax.servlet.http.HttpServletRequest request,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;javax.servlet.http.HttpServletResponse response,&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;javax.servlet.FilterChain filterChain) throws javax.servlet.ServletException, java.io.IOException {&#10;&#9;&#9;try {&#10;&#9;&#9;&#9;java.lang.String jwt = getJwtFromRequest(request);&#10;&#10;&#9;&#9;&#9;if (org.springframework.util.StringUtils.hasText(jwt) &amp;&amp; tokenProvider.validateToken(jwt)) {&#10;&#9;&#9;&#9;&#9;java.lang.Long userId = tokenProvider.getUserIdFromJWT(jwt);&#10;&#10;&#9;&#9;&#9;&#9;org.springframework.security.core.userdetails.UserDetails userDetails = customUserDetailsService.loadUserById(userId);&#10;&#9;&#9;&#9;&#9;org.springframework.security.authentication.UsernamePasswordAuthenticationToken authentication = new org.springframework.security.authentication.UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());&#10;&#9;&#9;&#9;&#9;authentication.setDetails(new org.springframework.security.web.authentication.WebAuthenticationDetailsSource().buildDetails(request));&#10;&#10;&#9;&#9;&#9;&#9;org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(authentication);&#10;&#9;&#9;&#9;}&#10;&#9;&#9;} catch (java.lang.Exception ex) {&#10;&#9;&#9;&#9;log.error(&quot;Could not set user authentication in security context&quot;, ex);&#10;&#9;&#9;}&#10;&#10;&#9;&#9;filterChain.doFilter(request, response);&#10;&#9;}&#10;&#10;&#9;private java.lang.String getJwtFromRequest(javax.servlet.http.HttpServletRequest request) {&#10;&#9;&#9;java.lang.String bearerToken = request.getHeader(&quot;Authorization&quot;);&#10;&#9;&#9;if (org.springframework.util.StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(&quot;Bearer &quot;)) {&#10;&#9;&#9;&#9;return bearerToken.substring(7, bearerToken.length());&#10;&#9;&#9;}&#10;&#9;&#9;return null;&#10;&#9;}&#10;}&#10;&#10;&#10;@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;@org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity(prePostEnabled = true)&#10;class SecurityConfig extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;&#9;@org.springframework.beans.factory.annotation.Autowired&#10;&#9;com.adechinan.dev.demojwt.CustomUserDetailsService customUserDetailsService;&#10;&#10;&#10;&#9;@org.springframework.context.annotation.Bean&#10;&#9;public com.adechinan.dev.demojwt.JwtAuthenticationFilter jwtAuthenticationFilter() {&#10;&#9;&#9;return new com.adechinan.dev.demojwt.JwtAuthenticationFilter();&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;public void configure(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder) throws java.lang.Exception {&#10;&#9;&#9;authenticationManagerBuilder&#10;&#9;&#9;&#9;&#9;.userDetailsService(customUserDetailsService)&#10;&#9;&#9;&#9;&#9;.passwordEncoder(passwordEncoder());&#10;&#9;}&#10;&#10;&#9;@org.springframework.context.annotation.Bean(org.springframework.security.config.BeanIds.AUTHENTICATION_MANAGER)&#10;&#9;@java.lang.Override&#10;&#9;public org.springframework.security.authentication.AuthenticationManager authenticationManagerBean() throws java.lang.Exception {&#10;&#9;&#9;return super.authenticationManagerBean();&#10;&#9;}&#10;&#10;&#9;@org.springframework.context.annotation.Bean&#10;&#9;public org.springframework.security.crypto.password.PasswordEncoder passwordEncoder() {&#10;&#9;&#9;return new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder();&#10;&#9;}&#10;&#10;&#9;@java.lang.Override&#10;&#9;protected void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;&#9;&#9;http&#10;&#9;&#9;&#9;&#9;.cors()&#10;&#9;&#9;&#9;&#9;.and()&#10;&#9;&#9;&#9;&#9;.csrf()&#10;&#9;&#9;&#9;&#9;.disable()&#10;&#9;&#9;&#9;&#9;.exceptionHandling()&#10;&#9;&#9;&#9;&#9;.and()&#10;&#9;&#9;&#9;&#9;.sessionManagement()&#10;&#9;&#9;&#9;&#9;.sessionCreationPolicy(org.springframework.security.config.http.SessionCreationPolicy.STATELESS)&#10;&#9;&#9;&#9;&#9;.and()&#10;&#9;&#9;&#9;&#9;.authorizeRequests()&#10;&#9;&#9;&#9;&#9;.antMatchers(&quot;/api/signup&quot;, &quot;/api/signin&quot;)&#10;&#9;&#9;&#9;&#9;.permitAll()&#10;&#9;&#9;&#9;&#9;.anyRequest()&#10;&#9;&#9;&#9;&#9;.authenticated();&#10;&#10;&#9;&#9;// Add our custom JWT security filter&#10;&#9;&#9;http.addFilterBefore(jwtAuthenticationFilter(), org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter.class);&#10;&#10;&#9;}&#10;}&#10;&#10;&#10;@org.springframework.web.bind.annotation.RestController&#10;@org.springframework.web.bind.annotation.RequestMapping(&quot;/api&quot;)&#10;@lombok.RequiredArgsConstructor&#10;class Endpoints {&#10;&#10;&#9;private final org.springframework.security.authentication.AuthenticationManager authenticationManager;&#10;&#10;&#9;private final com.adechinan.dev.demojwt.UserRepository userRepository;&#10;&#10;&#9;private final com.adechinan.dev.demojwt.RoleRepository roleRepository;&#10;&#10;&#9;private final org.springframework.security.crypto.password.PasswordEncoder passwordEncoder;&#10;&#10;&#9;private final com.adechinan.dev.demojwt.JwtTokenProvider tokenProvider;&#10;&#10;&#9;@org.springframework.web.bind.annotation.GetMapping&#10;&#9;@org.springframework.security.access.prepost.PreAuthorize(&quot;hasRole('USER')&quot;)&#10;&#9;public java.lang.String index() {&#10;&#9;&#9;return &quot;index endpoint&quot;;&#10;&#9;}&#10;&#10;&#9;@org.springframework.web.bind.annotation.GetMapping(&quot;/me&quot;)&#10;&#9;@org.springframework.security.access.prepost.PreAuthorize(&quot;hasRole('USER')&quot;)&#10;&#9;public java.util.Map&lt;java.lang.Object, java.lang.Object&gt; currentUser(@org.springframework.security.core.annotation.AuthenticationPrincipal org.springframework.security.core.userdetails.UserDetails userDetails){&#10;&#9;&#9;java.util.Map&lt;java.lang.Object, java.lang.Object&gt; model = new java.util.HashMap&lt;&gt;();&#10;&#9;&#9;model.put(&quot;username&quot;, userDetails.getUsername());&#10;&#9;&#9;model.put(&quot;roles&quot;, userDetails.getAuthorities()&#10;&#9;&#9;&#9;&#9;.stream()&#10;&#9;&#9;&#9;&#9;.map(org.springframework.security.core.GrantedAuthority::getAuthority)&#10;&#9;&#9;&#9;&#9;.collect(toList())&#10;&#9;&#9;);&#10;&#9;&#9;return model;&#10;&#9;}&#10;&#10;&#9;@org.springframework.web.bind.annotation.PostMapping(&quot;/signin&quot;)&#10;&#9;public java.lang.String signin(@javax.validation.Valid @org.springframework.web.bind.annotation.RequestBody com.adechinan.dev.demojwt.User user) {&#10;&#10;&#9;&#9;org.springframework.security.core.Authentication authentication = authenticationManager.authenticate(&#10;&#9;&#9;&#9;&#9;new org.springframework.security.authentication.UsernamePasswordAuthenticationToken(&#10;&#9;&#9;&#9;&#9;&#9;&#9;user.getEmail(),&#10;&#9;&#9;&#9;&#9;&#9;&#9;user.getPassword()&#10;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;);&#10;&#10;&#9;&#9;org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(authentication);&#10;&#10;&#9;&#9;return tokenProvider.generateToken(authentication);&#10;&#10;&#9;}&#10;&#10;&#9;@org.springframework.web.bind.annotation.PostMapping(&quot;/signup&quot;)&#10;&#9;public java.lang.String signup(@javax.validation.Valid @org.springframework.web.bind.annotation.RequestBody com.adechinan.dev.demojwt.User userRequest) {&#10;&#10;&#9;&#9;// Creating user's account&#10;&#9;&#9;com.adechinan.dev.demojwt.User user = new com.adechinan.dev.demojwt.User(userRequest.getName(), userRequest.getUsername(),&#10;&#9;&#9;&#9;&#9;userRequest.getEmail(), userRequest.getPassword());&#10;&#10;&#9;&#9;user.setPassword(passwordEncoder.encode(user.getPassword()));&#10;&#10;&#9;&#9;com.adechinan.dev.demojwt.Role userRole = roleRepository.findByName(com.adechinan.dev.demojwt.RoleName.ROLE_USER)&#10;&#9;&#9;&#9;&#9;.orElseThrow(() -&gt; new java.lang.RuntimeException(&quot;Role Unavailable&quot;));&#10;&#10;&#9;&#9;user.setRoles(java.util.Collections.singleton(userRole));&#10;&#10;&#9;    userRepository.save(user);&#10;&#9;&#9;return &quot;User registered successfully&quot;;&#10;&#10;&#10;&#9;}&#10;&#10;&#9;@org.springframework.web.bind.annotation.GetMapping(&quot;/admin&quot;)&#10;&#9;@org.springframework.security.access.prepost.PreAuthorize(&quot;hasRole('ADMIN')&quot;)&#10;&#9;public java.lang.String admin() {&#10;&#9;&#9;return &quot;admin point&quot;;&#10;&#9;}&#10;&#10;&#10;}&#10;&#10;&#10;&#10;@org.springframework.boot.autoconfigure.SpringBootApplication&#10;@lombok.extern.slf4j.Slf4j&#10;@lombok.RequiredArgsConstructor&#10;public class DemoJwtApplication implements org.springframework.boot.CommandLineRunner {&#10;&#10;&#9;private final com.adechinan.dev.demojwt.RoleRepository roleRepository;&#10;&#10;&#9;@java.lang.Override&#10;&#9;public void run(java.lang.String... args) {&#10;&#9;&#9;log.info(&quot;initializing roles data...&quot;);&#10;&#9;&#9;java.util.Arrays.asList(com.adechinan.dev.demojwt.RoleName.ROLE_ADMIN, com.adechinan.dev.demojwt.RoleName.ROLE_USER).forEach(r -&gt; this.roleRepository.save(new com.adechinan.dev.demojwt.Role(r)));&#10;&#10;&#9;}&#10;&#10;&#9;public static void main(java.lang.String[] args) {&#10;&#9;&#9;org.springframework.boot.SpringApplication.run(com.adechinan.dev.demojwt.DemoJwtApplication.class, args);&#10;&#9;}&#10;&#10;}" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>