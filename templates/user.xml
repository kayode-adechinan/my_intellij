<templateSet group="user">
  <template name="pt.dao" value="class Student {&#10;    private java.lang.String name;&#10;    private int rollNo;&#10;&#10;    Student(java.lang.String name, int rollNo){&#10;        this.name = name;&#10;        this.rollNo = rollNo;&#10;    }&#10;&#10;    public java.lang.String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(java.lang.String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public int getRollNo() {&#10;        return rollNo;&#10;    }&#10;&#10;    public void setRollNo(int rollNo) {&#10;        this.rollNo = rollNo;&#10;    }&#10;}&#10;&#10;interface StudentDao {&#10;    public java.util.List&lt;Student&gt; getAllStudents();&#10;    public Student getStudent(int rollNo);&#10;    public void updateStudent(Student student);&#10;    public void deleteStudent(Student student);&#10;}&#10;&#10;class StudentDaoImpl implements StudentDao {&#10;&#10;    //list is working as a database&#10;    java.util.List&lt;Student&gt; students;&#10;&#10;    public StudentDaoImpl(){&#10;        students = new java.util.ArrayList&lt;Student&gt;();&#10;        Student student1 = new Student(&quot;Robert&quot;,0);&#10;        Student student2 = new Student(&quot;John&quot;,1);&#10;        students.add(student1);&#10;        students.add(student2);&#10;    }&#10;    @java.lang.Override&#10;    public void deleteStudent(Student student) {&#10;        students.remove(student.getRollNo());&#10;        java.lang.System.out.println(&quot;Student: Roll No &quot; + student.getRollNo() + &quot;, deleted from database&quot;);&#10;    }&#10;&#10;    //retrive list of students from the database&#10;    @java.lang.Override&#10;    public java.util.List&lt;Student&gt; getAllStudents() {&#10;        return students;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public Student getStudent(int rollNo) {&#10;        return students.get(rollNo);&#10;    }&#10;&#10;    @java.lang.Override&#10;    public void updateStudent(Student student) {&#10;        students.get(student.getRollNo()).setName(student.getName());&#10;        java.lang.System.out.println(&quot;Student: Roll No &quot; + student.getRollNo() + &quot;, updated in the database&quot;);&#10;    }&#10;}&#10;&#10;class DaoPatternDemo {&#10;    public static void main(java.lang.String[] args) {&#10;        StudentDao studentDao = new StudentDaoImpl();&#10;&#10;        //print all students&#10;        for (Student student : studentDao.getAllStudents()) {&#10;            java.lang.System.out.println(&quot;Student: [RollNo : &quot; + student.getRollNo() + &quot;, Name : &quot; + student.getName() + &quot; ]&quot;);&#10;        }&#10;&#10;&#10;        //update student&#10;        Student student =studentDao.getAllStudents().get(0);&#10;        student.setName(&quot;Michael&quot;);&#10;        studentDao.updateStudent(student);&#10;&#10;        //get the student&#10;        studentDao.getStudent(0);&#10;        java.lang.System.out.println(&quot;Student: [RollNo : &quot; + student.getRollNo() + &quot;, Name : &quot; + student.getName() + &quot; ]&quot;);&#10;    }&#10;}" description="Simple DAO pattern" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="dkc.java.postgres.mongo.maven" value="version: '3'&#10;services:&#10;&#10;  ade-postgres:&#10;    image: &quot;postgres&quot;&#10;    container_name: &quot;my_postgres&quot;&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    restart: always&#10;&#10;  ade-mongo:&#10;    container_name: mongo&#10;    image: mongo&#10;    ports:&#10;      - &quot;27017:27017&quot;&#10;    restart: always&#10;&#10;&#10;  app:&#10;    build: .&#10;    volumes:&#10;      - .:/app&#10;      - ~/.m2:/root/.m2&#10;    working_dir: /app&#10;    ports:&#10;      - 8080:8080&#10;    command: mvn clean spring-boot:run&#10;    depends_on:&#10;      - ade-postgres&#10;      - ade-mongo" description="Simple docker compose file for java, postgres, mongo and maven" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="dk.maven" value="FROM maven:3.6.1-jdk-12" description="Simple dockerfile for maven" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="dk.gradle" value="FROM gradle:5.5.1-jdk12" description="Simple dockerfile for gradle" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="sb.setup.postgres" value="## default connection pool&#10;spring.datasource.hikari.connectionTimeout=20000&#10;spring.datasource.hikari.maximumPoolSize=5&#10;spring.datasource.url=jdbc:postgresql://ade-postgres:5432/postgres&#10;spring.datasource.username=postgres&#10;spring.datasource.password=&#10;spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true&#10;spring.jpa.hibernate.ddl-auto=create" description="Spring Boot Postgres setup" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="sb.setup.mongo" value="spring.data.mongodb.host=ade-mongo&#10;spring.data.mongodb.port=27017&#10;spring.data.mongodb.database=demo&#10;#spring.data.mongodb.uri=mongodb://eyeco:eyeco2019@ds249137.mlab.com:49137/eyeco" description="Spring Boot Mongo setup" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
</templateSet>